{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"djfedos-search djfedos-search is a python library that implements a quick search of a token by its prefix. Purpose of the project First of all it can be used as an engine behind the user input suggestion, like in searching engines. Here you can try it out in this role. How does it work? How to run a demo in my own environment? How to use the library in my project? Tests Benchmarks Authors This library is written by Fedor Ivashchenko under the guidance of Yair Dar","title":"djfedos-search"},{"location":"#djfedos-search","text":"djfedos-search is a python library that implements a quick search of a token by its prefix.","title":"djfedos-search"},{"location":"#purpose-of-the-project","text":"First of all it can be used as an engine behind the user input suggestion, like in searching engines. Here you can try it out in this role.","title":"Purpose of the project"},{"location":"#how-does-it-work","text":"","title":"How does it work?"},{"location":"#how-to-run-a-demo-in-my-own-environment","text":"","title":"How to run a demo in my own environment?"},{"location":"#how-to-use-the-library-in-my-project","text":"","title":"How to use the library in my project?"},{"location":"#tests","text":"","title":"Tests"},{"location":"#benchmarks","text":"","title":"Benchmarks"},{"location":"#authors","text":"This library is written by Fedor Ivashchenko under the guidance of Yair Dar","title":"Authors"},{"location":"how_does_it_wrok/","text":"How does it work? First it takes a list of words as an input. It turns this list into a trie aka a prefix tree. Then it takes a prefix (any given string of characters) as an input and returns the words (aka tokens) from the trie that start with this prefix. More details The library itself is in lib_search_sdk.py file. It's self-contained, it doesn't need any other files from the repository in order to work. It also doesn't import any python modules. All the additional files are there for testing, benchmarking, documentation and demonstration purposes. The input format for words (aka tokens) is a text file, one word per line. The input format for prefix is string. Given an empty string as a prefix the library will output all the words stored in its prefix tree, though only if limit is set to None . limit is an optional parameter, by default it's set to 10. It defines the maximum amount of words that the library will return for a given prefix. Limit can be an integer number or None . When limit is set to None , the library outputs all the words that start with a given prefix. For even more details you're always welcome to read the source code and ask me any questions.","title":"How does it wrok"},{"location":"how_does_it_wrok/#how-does-it-work","text":"First it takes a list of words as an input. It turns this list into a trie aka a prefix tree. Then it takes a prefix (any given string of characters) as an input and returns the words (aka tokens) from the trie that start with this prefix.","title":"How does it work?"},{"location":"how_does_it_wrok/#more-details","text":"The library itself is in lib_search_sdk.py file. It's self-contained, it doesn't need any other files from the repository in order to work. It also doesn't import any python modules. All the additional files are there for testing, benchmarking, documentation and demonstration purposes. The input format for words (aka tokens) is a text file, one word per line. The input format for prefix is string. Given an empty string as a prefix the library will output all the words stored in its prefix tree, though only if limit is set to None . limit is an optional parameter, by default it's set to 10. It defines the maximum amount of words that the library will return for a given prefix. Limit can be an integer number or None . When limit is set to None , the library outputs all the words that start with a given prefix. For even more details you're always welcome to read the source code and ask me any questions.","title":"More details"},{"location":"how_to_run_my_own_demo/","text":"How to run a demo in my own environment There is a FastAPI-based web API in fapi_server.py . While running, it will reply to the queries. Make sure that the requirements are satisfied and run it. Then open http://0.0.0.0:18000 in a browser (make sure that JSON content gets displayed properly; in Chrome it can be achieved with JSON Viewer extension ). Load an example list of tokens by clicking the \"recreate\" link. Now you can try other links, especially \"query\" with any prefixes you like. You can as well open js_web_ui/index.html in a browser and try out a demo suggestion web app, identical to this one . To try out the library with a decent example base of tokens in a convenient web interface you can also launch neat_pywebio_app.py .","title":"How to run my own demo"},{"location":"how_to_run_my_own_demo/#how-to-run-a-demo-in-my-own-environment","text":"There is a FastAPI-based web API in fapi_server.py . While running, it will reply to the queries. Make sure that the requirements are satisfied and run it. Then open http://0.0.0.0:18000 in a browser (make sure that JSON content gets displayed properly; in Chrome it can be achieved with JSON Viewer extension ). Load an example list of tokens by clicking the \"recreate\" link. Now you can try other links, especially \"query\" with any prefixes you like. You can as well open js_web_ui/index.html in a browser and try out a demo suggestion web app, identical to this one . To try out the library with a decent example base of tokens in a convenient web interface you can also launch neat_pywebio_app.py .","title":"How to run a demo in my own environment"},{"location":"how_to_use/","text":"How to use the library in my project? The library itself is in the lib_search_sdk.py file. In order to use it, import it: import lib_search_sdk The external API of lib_search_sdk has two main methods: 1. load_db(path:str=None) To load a list of words, pass a path to the .txt file containing one word per line. This function returns a dict, that is the database to search through. Example: test_token_db = load_db('tests/1200_tokens.txt') 2. get_suggestions(mdb:dict, prefix:str, limit:int=10) To get suggestions, pass a token db returned by load_db() as a first argument, a prefix as a second argument and optionally the limit, which is the maximum amount of suggestions you want to get from this function. By default the limit is set to 10. If you want to get all the suggestions, pass None as a limit. Examples: suggestions = get_suggestions(test_token_db, 'flo') suggestions = get_suggestions(test_token_db, 'ma', None) suggestions = get_suggestions(test_token_db, 'do', 3) There is also an additional method: 3. add_to_db(mdb:dict, token:str) To add a token to the existing db, pass the db as a first argument and a token as a second. Example: add_to_db(test_token_db, 'acidity') if this token is already in the db, this function will return False , else it will add a token and return True .","title":"How to use"},{"location":"how_to_use/#how-to-use-the-library-in-my-project","text":"The library itself is in the lib_search_sdk.py file. In order to use it, import it: import lib_search_sdk The external API of lib_search_sdk has two main methods:","title":"How to use the library in my project?"},{"location":"how_to_use/#1-load_dbpathstrnone","text":"To load a list of words, pass a path to the .txt file containing one word per line. This function returns a dict, that is the database to search through. Example: test_token_db = load_db('tests/1200_tokens.txt')","title":"1. load_db(path:str=None)"},{"location":"how_to_use/#2-get_suggestionsmdbdict-prefixstr-limitint10","text":"To get suggestions, pass a token db returned by load_db() as a first argument, a prefix as a second argument and optionally the limit, which is the maximum amount of suggestions you want to get from this function. By default the limit is set to 10. If you want to get all the suggestions, pass None as a limit. Examples: suggestions = get_suggestions(test_token_db, 'flo') suggestions = get_suggestions(test_token_db, 'ma', None) suggestions = get_suggestions(test_token_db, 'do', 3) There is also an additional method:","title":"2. get_suggestions(mdb:dict, prefix:str, limit:int=10)"},{"location":"how_to_use/#3-add_to_dbmdbdict-tokenstr","text":"To add a token to the existing db, pass the db as a first argument and a token as a second. Example: add_to_db(test_token_db, 'acidity') if this token is already in the db, this function will return False , else it will add a token and return True .","title":"3. add_to_db(mdb:dict, token:str)"}]}